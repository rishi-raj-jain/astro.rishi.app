---
import Header from '@/components/Header.astro'
import BaseHead from '@/components/BaseHead.astro'
import { SITE_DESCRIPTION, SITE_TITLE } from '../config'

const {
  content: { title = SITE_TITLE, description = SITE_DESCRIPTION },
  valid,
} = Astro.props
---

<html lang="en">
  <head>
    <BaseHead title={title} description={description} />
    <noscript>
      <style>
        .hide-if-no-javascript {
          display: none;
        }
      </style>
    </noscript>
    <style is:global>
      .heading_hover_hash:hover {
        cursor: pointer;
        text-decoration: underline;
      }
      .remark-highlight {
        width: 75vw;
      }
      @media screen and (max-width: 768px) {
        .remark-highlight {
          width: 95vw;
        }
      }
      article > *:not(.remark-highlight) {
        text-align: left;
        align-self: flex-start;
        content-visibility: auto;
      }
    </style>
  </head>

  <body class="bg-white dark:bg-black min-h-screen font-display">
    <Header />
    <main class="flex flex-col items-center text-black dark:text-gray-200">
      <div class="flex w-full max-w-[90vw] lg:max-w-[75vw] flex-col py-10 sm:px-10">
        {valid && <slot />}
      </div>
    </main>
    <script is:inline>
      // Add listener to sessionStorage events
      const themeChangeListener = () => {
        let sessionTheme = sessionStorage.getItem('theme')
        if (sessionTheme === 'light') {
          document.documentElement.classList.remove('dark')
        } else {
          document.documentElement.classList.add('dark')
        }
      }
      // Check the theme preferred in the window acc. to the zone
      const theme = (() => {
        if (typeof window !== 'undefined') {
          return window.sessionStorage.getItem('theme') || 'light'
        }
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dark'
        }
        return 'light'
      })()
      // Set the theme as light / dark
      window.sessionStorage.setItem('theme', theme)
      themeChangeListener()
      // Toggle theme function
      const toggleTheme = () => {
        let existingTheme
        if (typeof window !== 'undefined' && window.sessionStorage.getItem('theme')) {
          existingTheme = window.sessionStorage.getItem('theme')
        }
        if (existingTheme) {
          window.sessionStorage.setItem('theme', existingTheme === 'dark' ? 'light' : 'dark')
        } else {
          window.sessionStorage.setItem('theme', 'light')
        }
        themeChangeListener()
      }
      if ('serviceWorker' in navigator) {
        fetch('/version.json')
          .then((res) => res.json())
          .then((res) => {
            if (res && res.version) {
              localStorage.setItem('received-sw-version', res.version)
              console.log('going to register.')
              navigator.serviceWorker.register('/service-worker.js').then(
                (registration) => {
                  console.log('Service worker registration succeeded:', registration)
                  const swVersion = localStorage.getItem('sw-version')
                  if (swVersion) {
                    if (swVersion !== res.version) {
                      console.log('Update registeration')
                      self.caches.delete('prefetch').then(() => {
                        registration.update().then(() => {
                          // Update the version if updated locally
                          localStorage.setItem('sw-version', res.version)
                        })
                      })
                    }
                  } else {
                    localStorage.setItem('sw-version', res.version)
                  }
                },
                (error) => {
                  console.error(`Service worker registration failed: ${error}`)
                }
              )
            }
          })
      } else {
        console.error('Service workers are not supported.')
      }
      const attrs = ['href', 'src', 'srcset', 'data-src']
      attrs.forEach((j) => {
        document.querySelectorAll(`[${j}^="/"]`).forEach((i) => {
          let sc = document.createElement('link')
          sc.setAttribute('rel', 'prefetch')
          sc.setAttribute('href', i.getAttribute(j))
          document.head.appendChild(sc)
        })
      })
    </script>
    <link rel="stylesheet" href="/css/dark.css" />


  </body>
</html>
